#!/bin/bash

SERIAL_PATH="/dev/ttyUSB0"
SERIAL_BAUD=9600
COMMAND=""

CLI_NAME="ardcom"

WORKING_DIR="./."$CLI_NAME"_temp/"

SOCAT_PID_PATH=$WORKING_DIR"socat.pid"
PIPE_PATH=$WORKING_DIR$CLI_NAME"_pipe"

READ_TIMEOUT=5 # ms

usage() {
    echo "Usage:"
    echo "  $CLI_NAME start (-p [path] -b [baud])       - Start background serial connection"
    echo "  $CLI_NAME stop                              - Stop background serial connection"
    echo "  $CLI_NAME restart                           - Restart background serial connection"
    echo "  $CLI_NAME send [command 1, command 2...]    - Send command to serial connection"
}

start() {
    while [[ $# -gt 0 ]]; do
        case "$1" in
            -p)
                SERIAL_PATH=$2
                shift 2
                ;;
            -b)
                SERIAL_BAUD=$2
                shift 2
                ;;
            *)
                echo "Invalid usage: use '$CLI_NAME help' to get usage"
                exit 1
                ;;
        esac
    done

    # check if file exists and its size is greater than zero
    if [[ -s $SOCAT_PID_PATH ]]; then
        echo "$CLI_NAME already running at PID $(< $SOCAT_PID_PATH)"
        exit 1
    fi

    #  check if directory exists
    if [[ ! -d $WORKING_DIR ]]; then
        mkdir -p $WORKING_DIR
    fi

    socat PTY,link=$PIPE_PATH,b$SERIAL_BAUD,raw,echo=0 $SERIAL_PATH,b$SERIAL_BAUD,raw & # run socat to connect FIFO to serial in background
    # socat creates the pipe file automatically

    echo $! >> $SOCAT_PID_PATH # store pid of latest executed background process
    echo "Started socat with PID $(< $SOCAT_PID_PATH)"
}

stop() {
    # check if file exists and its size is greater than zero
    if [[ ! -s $SOCAT_PID_PATH ]]; then
        echo "$CLI_NAME is not started"
        exit 1
    fi

    kill $(< $SOCAT_PID_PATH) && echo "Killed socat (PID $(< $SOCAT_PID_PATH))"
    # socat deteles its associated pipe file automatically

    #  check if directory exists
    if [[ -d $WORKING_DIR ]]; then
        rm -r $WORKING_DIR
    fi
}

restart() {
    stop
    start
}

send() {
    # check if file exists
    if [[ ! -e $PIPE_PATH ]]; then
        echo "Pipe not found, did you start $CLI_NAME yet?"
        exit 1
    fi

    while [[ $# -gt 0 ]]; do
        echo -e $1 > $PIPE_PATH
        shift 1

        timedout=0 # error checker to see if the read times out

        while timedout=1 && read -r -t $READ_TIMEOUT output < $PIPE_PATH; do

            timedout=0
            output=$(printf '%s' "$output" | tr -d '\r\n') # clean whitespaces

            # arduino is coded to send a * everytime it successfully finishes a command/job
            if [[ $output == "*" ]]; then
                break
            fi

            # check if first character is "=" meaning error
            if [[ "${output:0:1}" == "=" ]]; then
                # echo "Error: ${output:1}"
                echo $output
                break
            fi

            echo $output
        done
        
        # if read times out, exit and dont send anymore command (sth wrong with arduino)
        if [[ $timedout -ne 0 ]]; then
            echo "Job incomplete after timeout. Restart $CLI_NAME to avoid unsynced logs"
            exit 1
        fi

    done
}

# main entry
if [[ $# -gt 0 ]]; then

    # get command and remove argument
    COMMAND=$1
    shift 1

    case "$COMMAND" in
        start)
            start $@ # pass remaining arguments to function
            exit 0
            ;;
        send)
            send $@
            exit 0
            ;;
        help)
            usage
            exit 0
            ;;
        stop)
            stop
            exit 0
            ;;
        restart)
            restart
            exit 0
            ;;
        *)
            echo "Use '$CLI_NAME help' to get usage"
            exit 1
            ;;
    esac
else
    echo "Use '$CLI_NAME help' to get usage"
    exit 1
fi